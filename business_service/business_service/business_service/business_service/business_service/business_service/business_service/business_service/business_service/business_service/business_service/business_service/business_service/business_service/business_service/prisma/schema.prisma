generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis(),uuid_ossp(map: "uuid-ossp"), pg_trgm()]
}

//==================================================================================================
//                  This is an autogenerated schema file, do not edit directly. 
//==================================================================================================

model Appointment {
   id Int @unique @id @default(autoincrement())
   day Days
   created_at DateTime @default(now())
   arrive_time DateTime
   leave_time DateTime
   time_of_the_day TimeOfTheDay
   pays_with String
   comment String
   status AppointmentStatus
   client_did_not_go Boolean
   canceled_by_business Boolean
   canceled_by_client Boolean
   client_arrived_late Boolean
   client_updated_time Boolean
   appointment_updated AppointmentUpdated?
   service_id Int
   service Service @relation(fields: [service_id], references: [id], onDelete: Cascade)
   employee_id String
   employee Employee @relation(fields: [employee_id], references: [id])
   client_id Int
   client Client @relation(fields: [client_id], references: [id], onDelete: Cascade)
   business_id String
   business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

model AppointmentUpdated {
    id Int @unique @id @default(autoincrement())
    old_arrive_time DateTime
    old_leave_time DateTime
    appointment_id Int @unique
    appointment Appointment @relation(fields: [appointment_id], references: [id])
}

enum AppointmentStatus {
    CANCELED
    PENDING
    ACTIVE
}


model Business {
    id String @id @default(uuid())
    user_id String
    profile_id Int @unique
    profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
    settings_id Int @unique
    settings Settings @relation(fields: [settings_id], references: [id], onDelete: Cascade)
    location_id Int @unique
    location Location @relation(fields: [location_id], references: [id], onDelete: Cascade)
    payment_methods_id Int @unique
    payment_methods PaymentMethods @relation(fields: [payment_methods_id], references: [id], onDelete: Cascade) 
    branch_id Int @unique
    branch Branch @relation(fields: [branch_id], references: [id], onDelete: Cascade)
    clients Client[]
    services Service[]
    employees Employee[]
    appointments Appointment[]
}

//This table will have all the references for all the business branches. Every branch will point to this table
model Branch {
    id Int @id @default(autoincrement())
    business Business[]
}


model Client {
    id Int @id @default(autoincrement()) @unique
    name String
    user_id Int
    avatar_url String
    rate Int
    client_insights_id Int @unique
    client_insights ClientInsights @relation(fields: [client_insights_id], references: [id], onDelete: Cascade)
    appointments Appointment[]
    business_id String @unique
    business Business @relation(fields: [business_id], references: [id], onDelete: Cascade) 
}

model ClientInsights {
    id Int @id @default(autoincrement()) @unique
    first_appointment_taken DateTime @default(now())
    last_appointment_taken DateTime
    appointments Int @default(0)
    appointments_taken Int @default(0)
    appointments_canceled Int @default(0)
    times_arrived_late Int @default(0)
    client Client?
}
model Employee {
    id String @id @default(uuid())
    name String
    avatar_url String
    services Service[]
    appointments Appointment[]
    schedules EmployeeSchedule[]
    business_id String
    business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

model EmployeeSchedule {
    id Int @id @default(autoincrement())
    day Days?
    month Int?
    day_number Int?
    date DateTime?
    intervals EmployeeScheduleInterval[]
    employee_id String
    employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
    @@unique([employee_id, day])
    @@unique([employee_id, day_number, month])
}


model EmployeeScheduleInterval {
    id Int @id @default(autoincrement())
    starts_at Float
    ends_at Float
    employee_schedule_id Int
    employee_schedual EmployeeSchedule @relation(fields: [employee_schedule_id], references: [id], onDelete: Cascade)
}
model Location {
    id Int @id @default(autoincrement()) @unique
    country String
    state String
    suburb String
    street String
    number Int
    lon Int
    lat Int
    business Business?
}

model PaymentMethods {
    id Int @id @unique @default(autoincrement()) 
    cash Boolean
    credit_card Boolean
    debit_card Boolean
    cryptocurrency Boolean
    wire_transfer Boolean
    mercado_pago Boolean
    cvu Boolean
    other_payments OtherPayments[]
    business Business?
}

model OtherPayments {
    id Int @id @unique @default(autoincrement())
    name String
    payment_id Int
    payment PaymentMethods @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}

model Profile {
    id Int @id @default(autoincrement()) @unique
    name String
    category String
    slogan String
    description String
    logo_url String
    cover_url String
    rate Int
    cost_level Int
    gallery Gallery[]
    business Business?
}

model Gallery {
    id Int @id @default(autoincrement()) @unique
    image_url String
    profile_id Int
    profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
}

model Service {
    id Int @id @default(autoincrement()) @unique
    name String
    price Float
    price_currency String
    is_discount Boolean
    discount_price Float
    appointments_frequency_in_minutes Float
    max_appointments_anticipation_in_days Float
    min_appointments_anticipation_in_days Float
    max_concurrent_appointments Float
    schedules ServiceSchedule[]
    employees Employee[]
    appointments Appointment[]
    business_id String
    business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}


model ServiceSchedule {
    id Int @id @default(autoincrement())
    day Days?
    month Int?
    day_number Int?
    date DateTime?
    intervals ServiceScheduleInterval[]
    service_id Int
    service Service @relation(fields: [service_id], references: [id], onDelete: Cascade)
    @@unique([service_id, day])
    @@unique([service_id, day_number, month])
}


model ServiceScheduleInterval {
    id Int @id @default(autoincrement())
    starts_at Float
    ends_at Float
    service_schedule_id Int
    service ServiceSchedule @relation(fields: [service_schedule_id], references: [id], onDelete: Cascade)
}



model Settings {
    id Int @id @default(autoincrement()) @unique
    verification Verification?
    business Business?
}

model Verification {
    id Int @id @default(autoincrement()) @unique
    is_verified Boolean
    verification_status String
    documentation_url String
    settings_id Int @unique
    settings Settings @relation(fields: [settings_id], references: [id], onDelete: Cascade)
}
enum Days {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum TimeOfTheDay {
    MORNING
    NOON
    AFTERNOON
    EVENING
    NIGHT
}
