datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//==================================================================================================
//                  This is an autogenerated schema file, do not edit directly. 
//==================================================================================================

model Business {
    id Int @id @default(autoincrement()) @unique
    user_id Int
    profile_id Int @unique
    profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
    settings_id Int @unique
    settings Settings @relation(fields: [settings_id], references: [id], onDelete: Cascade)
    location_id Int @unique
    location Location @relation(fields: [location_id], references: [id], onDelete: Cascade)
    payment_methods_id Int @unique
    payment_methods PaymentMethods @relation(fields: [payment_methods_id], references: [id]) 
    branch_id Int @unique
    branch Branch @relation(fields: [branch_id], references: [id])
    //One becomes a customer when the business adds him or after a successfull appointment
    clients Client[]
    services Service[]
}

model Branch {
    id Int @id @default(autoincrement()) @unique
    is_branch Boolean
    headquarters_id Int
    business Business?
}


model Client {
    id Int @id @default(autoincrement()) @unique
    user_id Int
    avatar_url String
    rate Int
    has_priority Boolean
    first_interaction DateTime @default(now())
    business_id Int @unique
    business Business @relation(fields: [business_id], references: [id]) 
}

model Location {
    id Int @id @default(autoincrement()) @unique
    country String
    province String
    locality String
    street String
    number Int
    lon Int
    lat Int
    business Business?
}

model PaymentMethods {
    id Int @id @unique @default(autoincrement()) 
    cash Boolean
    credit_card Boolean
    debit_card Boolean
    cryptocurrency Boolean
    wire_transfer Boolean
    mercado_pago Boolean
    cvu Boolean
    other_payments OtherPayments[]
    business Business?
}

model OtherPayments {
    id Int @id @unique @default(autoincrement())
    name String
    payment_id Int
    payment PaymentMethods @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}

model Profile {
    id Int @id @default(autoincrement()) @unique
    name String
    category String
    slogan String
    description String
    logo_url String
    cover_url String
    rate Int
    cost_level Int
    gallery Gallery[]
    business Business?
}

model Gallery {
    id Int @id @default(autoincrement()) @unique
    image_url String
    profile_id Int
    profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
}

model Service {
    id Int @id @default(autoincrement()) @unique
    name String
    price String
    price_currency String
    business_id Int
    business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}
model Settings {
    id Int @id @default(autoincrement()) @unique
    branch_share_clients Boolean
    // Can see profile, needs to request before taking an appointment
    private Boolean
    // Can only be found through a invitation key 
    hidden Boolean
    invitation_keys InvitationKeys?
    verification Verification?
    business Business?
}

model Verification {
    id Int @id @default(autoincrement()) @unique
    is_verified Boolean
    verification_status String
    documentation_url String
    settings_id Int @unique
    settings Settings @relation(fields: [settings_id], references: [id], onDelete: Cascade)
}

model InvitationKeys {
    id Int @id @default(autoincrement()) @unique
    keys InvitationKey[]
    keys_duration Int
    customers_can_invitate Boolean
    settings_id Int @unique
    settings Settings @relation(fields: [settings_id], references: [id])
}

model InvitationKey{
    id Int @id @default(autoincrement()) @unique
    key String @unique
    expires_at DateTime
    invitation_config_id Int @unique
    invitation_keys_config InvitationKeys @relation(fields: [invitation_config_id], references: [id], onDelete: Cascade)
}
